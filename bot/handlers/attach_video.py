from rbdata.native_api import NativeRbData
import rbdata
import os
from telebot.types import Message
import re

from ..bot import bot
import settings
from .conditionals import is_a_reply, is_numeric, replies_to, from_bot,has_link_to_storage, and_


# Handlers

def extract_video_id(text, messaging_callback):

        m=list(re.finditer(pattern=settings.STORAGE_URL_REGEXP,string=text))
        if m is None or not m:
            messaging_callback("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç—á, —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ üòñ")
            return
        elif len(m)>1:
            messaging_callback("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ü§î")
            return

        video_id=m[0].group("video_id")
        return video_id

def append_match_id(match_id,video_id, messaging_callback):
    n=NativeRbData(os.getenv("RBDATA_EMAIL"),os.getenv("RBDATA_PASSWORD"))
    if(n.attach_match(match_id=match_id, video_id=video_id)):
        messaging_callback(text="üôå")
        messaging_callback(text=f"–ü—Ä–∏–≤—è–∑–∞–ª `–≤–∏–¥–µ–æ {video_id}` –∫ `–º–∞—Ç—á—É {match_id}`",parse_mode="MARKDOWN") #TODO –ø–∏—Å–∞—Ç—å –∏–º—è –≤–∏–¥–µ–æ –∏ –º–∞—Ç—á–∞! –∏–ª–∏ —Å—Å—ã–ª–∫–∏ —Ö–æ—Ç—è–±—ã            
    else:
        messaging_callback(text="üò¢")
        messaging_callback(text=f"–Ø –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–≤—è–∑–∞—Ç—å `–≤–∏–¥–µ–æ {video_id}` –∫ `–º–∞—Ç—á—É {match_id}`",parse_mode="MARKDOWN") 



# Handlers

@bot.message_handler(func=and_(is_numeric,replies_to(from_bot,has_link_to_storage)))
def on_numeric_reply_to_links(message:Message):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∫ –º–∞—Ç—á—É, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏ –ø–æ–ª—É—á–∏–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–∏—Ñ—Ä, –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ"""
    reply_to_callback=lambda text,**kwargs: bot.reply_to(message,text=text,**kwargs) #–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫–∞–∫–æ–π-—Ç–æ —Å–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≤–µ —á—Ç–æ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–µ –º–µ—Å—Å–∞–¥–∂ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∞ –≤–æ—Ç —Ç–∞–∫–æ–µ, –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
    write_to_chat_callback=lambda text,**kwargs: bot.send_message(chat_id=message.chat.id,text=text,**kwargs)
    message_with_video=message.reply_to_message

    video_id=extract_video_id(message_with_video.text,messaging_callback=reply_to_callback)
    match_id=message.text
    #TODO –ø—Ä–æ–≤–µ—Ä–∫–∞, –∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤–æ–æ–±—â–µ!
    append_match_id(match_id=match_id, video_id=video_id,messaging_callback=write_to_chat_callback)


    n=NativeRbData(os.getenv("RBDATA_EMAIL"),os.getenv("RBDATA_PASSWORD"))
    if(n.attach_match(match_id=match_id, video_id=video_id)):
        bot.send_message(chat_id=message.chat.id,text="üôå")
        bot.send_message(chat_id=message.chat.id,text=f"–ü—Ä–∏–≤—è–∑–∞–ª `–≤–∏–¥–µ–æ {video_id}` –∫ `–º–∞—Ç—á—É {match_id}`",parse_mode="MARKDOWN") #TODO –ø–∏—Å–∞—Ç—å –∏–º—è –≤–∏–¥–µ–æ –∏ –º–∞—Ç—á–∞! –∏–ª–∏ —Å—Å—ã–ª–∫–∏ —Ö–æ—Ç—è–±—ã            
    else:
        bot.send_message(chat_id=message.chat.id,text="üò¢")
        bot.send_message(chat_id=message.chat.id,text=f"–Ø –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–≤—è–∑–∞—Ç—å `–≤–∏–¥–µ–æ {video_id}` –∫ `–º–∞—Ç—á—É {match_id}`",parse_mode="MARKDOWN") 
