from rbdata.native_api import NativeRbData
import rbdata
import os
from telebot.types import Message
import re

from ..bot import bot
import settings
from .conditionals import is_a_reply, is_numeric, replies_to, from_bot,has_link_to_storage, and_

SEPARATORS=':='
#TODO –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –±—ã –≤ update_video –∏–ª–∏ —Ç–∏–ø–∞ —Ç–æ–≥–æ

# Helpers

def extract_video_id(text, messaging_callback):

        m=list(re.finditer(pattern=settings.STORAGE_URL_REGEXP,string=text))
        if m is None or not m:
            messaging_callback("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç—á, —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ üòñ")
            return
        elif len(m)>1:
            messaging_callback("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ü§î")
            return

        video_id=m[0].group("video_id")
        return video_id

def extract_parameter(text:str)-> (str,str,bool):
    """–î–æ—Å—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ c–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ `id=2`
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: parameter_name str, parameter_value str, success bool
    –≤–µ—Ä–Ω–µ—Ç ("id","2", True) –∏–ª–∏ 
    None, None, False ‚Äî –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ(success) –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è False"""
    pattern=rf'(?P<name>\w+)[{SEPARATORS}](?P<value>.*)'
    m=re.search(pattern=pattern,string=text)
    if m is None:
        return None,None,False
    return m.group("name"),m.group("value"), True

def append_match_id(match_id,video_id, messaging_callback):
    n=NativeRbData(os.getenv("RBDATA_EMAIL"),os.getenv("RBDATA_PASSWORD"))
    if(n.attach_match(match_id=match_id, video_id=video_id)):
        messaging_callback(text="üôå")
        messaging_callback(text=f"–ü—Ä–∏–≤—è–∑–∞–ª `–≤–∏–¥–µ–æ {video_id}` –∫ `–º–∞—Ç—á—É {match_id}`",parse_mode="MARKDOWN") #TODO –ø–∏—Å–∞—Ç—å –∏–º—è –≤–∏–¥–µ–æ –∏ –º–∞—Ç—á–∞! –∏–ª–∏ —Å—Å—ã–ª–∫–∏ —Ö–æ—Ç—è–±—ã            
    else:
        messaging_callback(text="üò¢")
        messaging_callback(text=f"–Ø –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–≤—è–∑–∞—Ç—å `–≤–∏–¥–µ–æ {video_id}` –∫ `–º–∞—Ç—á—É {match_id}`",parse_mode="MARKDOWN") 


# Conditionals

def is_parameter_setting(message:Message):
    """–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–æ –µ—Å—Ç—å –∏–º–µ–µ—Ç –≤–∏–¥
    `name=–í–∏–¥–µ–æ` –∏–ª–∏ `matchid: 123`"""

    return any((sep in message.text for sep in SEPARATORS))
     

# Handlers

@bot.message_handler(func=and_(is_numeric,replies_to(from_bot,has_link_to_storage)))
def on_numeric_reply_to_links(message:Message):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∫ –º–∞—Ç—á—É, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏ –ø–æ–ª—É—á–∏–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–∏—Ñ—Ä, –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ"""
    reply_to_callback=lambda text,**kwargs: bot.reply_to(message,text=text,**kwargs) #–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫–∞–∫–æ–π-—Ç–æ —Å–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≤–µ —á—Ç–æ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–µ –º–µ—Å—Å–∞–¥–∂ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∞ –≤–æ—Ç —Ç–∞–∫–æ–µ, –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
    write_to_chat_callback=lambda text,**kwargs: bot.send_message(chat_id=message.chat.id,text=text,**kwargs)
    message_with_video=message.reply_to_message

    video_id=extract_video_id(message_with_video.text,messaging_callback=reply_to_callback)
    match_id=message.text
    #TODO –ø—Ä–æ–≤–µ—Ä–∫–∞, –∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤–æ–æ–±—â–µ!
    append_match_id(match_id=match_id, video_id=video_id,messaging_callback=write_to_chat_callback)

# —Å–≤—è–∑—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç
func_map={
    ("matchId","match","matchid","match_id"): lambda video_id, value, messaging_callback: append_match_id(video_id=video_id, match_id=value,messaging_callback=messaging_callback),
    ("name","videoName","video_name"): lambda video_id, value, messaging_callback: messaging_callback("Not Implemented ü§£ –ê–≤—Ç–æ—Ä—É —É–±–µ–∂—ç–∞–ª —Å–Ω–∏–º–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
}

@bot.message_handler(
    func=and_(is_parameter_setting, replies_to(from_bot,has_link_to_storage)))
def on_parametric_message_in_reply_to_link(message:Message):
    reply_to_callback=lambda text,**kwargs: bot.reply_to(message,text=text,**kwargs)
    write_to_chat_callback=lambda text,**kwargs: bot.send_message(chat_id=message.chat.id,text=text,**kwargs)
    message_with_video=message.reply_to_message
    video_id=extract_video_id(message_with_video.text,messaging_callback=reply_to_callback)

    param_name, param_value, success=extract_parameter(message.text)
    if not success:
        bot.send_message(chat_id=message.chat.id,text="ü§î –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —á—Ç–æ-—Ç–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –Ω–æ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å —á—Ç–æ... –°–¥–∞—é—Å—å")
        return

    #calling a function for specified parameter name
    for params in func_map:
        if param_name in params:
            func_map[params](video_id=video_id,value=param_value,messaging_callback=write_to_chat_callback)
            return

    bot.send_message(chat_id=message.chat.id,text=f"–Ø –µ—â—ë –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è {param_name}")